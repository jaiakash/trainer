name: Approve to run E2E Tests on GPU Runner

permissions:
  actions: write
  contents: read

on:
  pull_request_target:
    types:
      - labeled
      - synchronize
  issue_comment:
    types:
      - created

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  membership-check:
    runs-on: ubuntu-latest
    outputs:
      is_member: ${{ steps.check.outputs.is_member }}
    steps:
      - name: Check if actor is a Kubeflow GitHub member
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const actor = github.event_name === 'issue_comment'
              ? context.payload.comment.user.login
              : context.payload.pull_request.user.login;
            const org = context.repo.owner;
            try {
              await github.rest.orgs.checkMembershipForUser({ org, username: actor });
              core.setOutput("is_member", "true");
            } catch (error) {
              if (error.status === 404) {
                core.setOutput("is_member", "false");
              } else {
                throw error;
              }
            }

  trigger-gpu-self-runner:
    needs: membership-check
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request != null &&
      needs.membership-check.outputs.is_member == 'true' &&
      contains(github.event.comment.body, '/run-e2e-on-gpu-runner')
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - run: echo "âœ… Running on OKE self-hosted runner triggered by a Kubeflow member."

  deny-non-member:
    needs: membership-check
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request != null &&
      needs.membership-check.outputs.is_member == 'false' &&
      contains(github.event.comment.body, '/run-e2e-on-gpu-runner')
    runs-on: ubuntu-latest
    steps:
      - name: Comment denial message
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš« @${context.payload.comment.user.login}, you are not a member of the Kubeflow organization. GPU E2E tests will not be triggered.`
            });
